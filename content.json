{"meta":{"title":"Jo's Note","subtitle":null,"description":null,"author":"Jo","url":"http://jodotlearn.github.io"},"pages":[],"posts":[{"title":"初次見面, MongoDB","slug":"初次見面-MongoDB","date":"2018-02-20T15:23:00.000Z","updated":"2018-07-08T09:08:23.608Z","comments":true,"path":"MongoDB/初次見面-MongoDB/","link":"","permalink":"http://jodotlearn.github.io/MongoDB/初次見面-MongoDB/","excerpt":"前言其實就是想對\b資料作 CRUD 又不太想去開 table schema，就瞄一下 MongoDB，為了方便自己測試使用，選擇在本機使用 docker 來建置，在這篇做個防\b忘記筆記。","text":"前言其實就是想對\b資料作 CRUD 又不太想去開 table schema，就瞄一下 MongoDB，為了方便自己測試使用，選擇在本機使用 docker 來建置，在這篇做個防\b忘記筆記。 環境Mac OS 10.13.3Docker 17.12.0-ce-mac49 步驟 到 docker-library 的 github 取得 mongo 的 Dockerfile 和 docker-entrypoint.sh，版本選擇 3.7 2個檔案放在相同目錄下 在該目錄下建一個 db 資料夾 用指令 build image docker build -t mongo:3.7 . 用建立的 image run 一個 containermongo db 預設不開啟權限管控，因此在 run container 的指令加上 –auth 將權限管控啟用 docker run -d -p your_port:27017 -v $PWD/db:/data/db --name mongodb mongo:3.7 --auth 進入建立好的 container docker exec -it mongodb /bin/bash 進入 mongo shell mongo admin 建立 user db.createUser(&#123;user: 'your_account', pwd: 'your_password', roles:['userAdminAnyDatabase','dbAdminAnyDatabase','readWriteAnyDatabase','clusterAdmin']&#125;) exit 改用建立的帳號登入 mongo -u your_account -p your_password --authenticationDatabase admin switch 到一個新的 database 如果這個 database 不存在，就會建立一個新的 use your_db_name 建立另一個\b帳號，對該 database 有管理及讀寫權限 底下指令的 ${your_db_name} 對\b照到建立的 database name db.createUser(&#123;user: 'a_db_user', pwd:'the_pwd_of_db_user', roles:[&#123;role:'dbAdmin',db:'$&#123;your_db_name&#125;'&#125;,&#123;role:'readWrite',db:'$&#123;your_db_name&#125;'&#125;]&#125;)exit 這麼做的目的是將權限下放給不同 user 管理特定的 database 登入的方式 mongo -u a_db_user -p the_pwd_of_db_user --authenticationDatabase your_db_name 成功登入後，需要選擇 database use your_db_name 原本以為登入後就會直接進到有管理權限的 database，但其實是需要自己再\b作切換。","categories":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://jodotlearn.github.io/categories/MongoDB/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jodotlearn.github.io/tags/Linux/"},{"name":"Docker","slug":"Docker","permalink":"http://jodotlearn.github.io/tags/Docker/"},{"name":"MongoDB","slug":"MongoDB","permalink":"http://jodotlearn.github.io/tags/MongoDB/"}]},{"title":"[CentOS 7] SVN Server 架設","slug":"CentOS-7-SVN-Server-架設","date":"2018-01-07T16:38:09.000Z","updated":"2018-01-08T16:04:13.000Z","comments":true,"path":"Linux/CentOS-7-SVN-Server-架設/","link":"","permalink":"http://jodotlearn.github.io/Linux/CentOS-7-SVN-Server-架設/","excerpt":"前言 這個架設筆記使用的環境是 CentOS 7， 在 CentOS 7 中的 subversion 版本比較低，所以另外尋找其他的 repository 來安裝，在這選擇的版本是 1.8，登入驗證的部分是設定跟 AD 認證 (也可以跟 ldap，之後再補充)","text":"前言 這個架設筆記使用的環境是 CentOS 7， 在 CentOS 7 中的 subversion 版本比較低，所以另外尋找其他的 repository 來安裝，在這選擇的版本是 1.8，登入驗證的部分是設定跟 AD 認證 (也可以跟 ldap，之後再補充) 安裝 準備 subversion 來源 在 /etc/yum.repos.d/ 下建立一個 repo 檔 cd /etc/yum.repos.dvi CentOS-SVN.repo 貼上以下內容後存檔 [WandiscoSVN]name=Wandisco SVN Repobaseurl=http://opensource.wandisco.com/centos/7/svn-1.8/RPMS/$basearch/enabled=1gpgcheck=1 完成後執行一下 update yum update 安裝需要的套件 apache yum install httpd subversion 及需要的套件 yum install subversion mod_dav_svn apache ldap module (SVN 的認證是跟 AD 或 LDAP 認證) yum install mod_ldap 配置 建立放檔案庫的目錄 cd /optmkdir -p svn/svnrootchown -R apache:apache svn 編輯設定檔 cd /etc/httpd/conf.dvi subversion.conf 修改 檔案裡的 區塊 &lt;Location /svn&gt; DAV svn SVNParentPath /opt/svn/svnroot AuthBasicProvider ldap AuthType Basic AuthName \"SVN Auth. (AD)\" AuthLDAPBindDN \"登入AD的DN\" AuthLDAPBindPassword \"登入AD的密碼\" AuthDLAPURL \" ldap://xxx.xxx.xxx.xxx:3268/根節點?sAMAccountName?sub?(objectClass=user)\" AuthzForceUsernameCase lower AuthzSVNReposRelativeAccessFile authz Require valid-user Allow from all&lt;/Location&gt; 關閉 SELinux 編輯 /etc/sysconfig/selinux vi /etc/sysconfig/selinux 將 SELINUX 改為 disabled，並註解 SELINUXTYPE # This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced.# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=disabled# SELINUXTYPE= can take one of three two values:# targeted - Targeted processes are protected,# minimum - Modification of targeted policy. Only selected processes are protected.# mls - Multi Level Security protection.#SELINUXTYPE=targeted 防火牆設定 firewall-cmd -add-port=80/tcp --permanentfirewall-cmd --reload 設定隨開機啟動 systemctl enable httpd.service 執行服務 systemctl start httpd.service 後記 到這邊都還順利的話，算是已經 將服務架設好了，在 /opt/svn/svnroot/ 下透過 svn 指令建立 repository 和設定權限後即可開始使用。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jodotlearn.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jodotlearn.github.io/tags/Linux/"},{"name":"Subversion","slug":"Subversion","permalink":"http://jodotlearn.github.io/tags/Subversion/"}]}]}